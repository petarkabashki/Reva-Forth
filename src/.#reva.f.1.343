: 2drop [ $8d04468b , $0876 2, ;inline
macro
: | 10 parse 2drop ;
: ( ') parse 2drop ;
| ========================= CORE WORDS ==================
: 0; [ $0275c009 , $c3ad 2, ;inline | or eax, eax; jnz .done; lodsd; ret; .done:
: drop ( a -- )   [ $768d068b , $04 1, ;inline
: ! [ $18891e8b ,  $adad 2, ;inline
forth
: xchg ( n a -- a^ ) [ $68bc389 , $8704768d , $3 1, ;
: (inline)
    parsews >single 0;
    drop 1, (inline) ;
macro
: inline{
    16 base xchg
    (inline)
    2drop base !  ;
forth
: 3drop inline{ 8b 46 08 8d 76 0c } ;inline
: pop>ebx inline{ 89 c3 8b 06 8d 76 04 } ;inline
: 0drop; inline{ 09 c0 75 03 ad ad c3 } ;inline | or eax, eax; jnz .done; lodsd; lodsd; ret; .done:
: aligned ( a -- a' ) inline{ 83 c0 03 83 e0 fc } ;inline | add eax, 3; and eax, -4
: dup ( a -- a a ) inline{ 8d 76 fc 89 06 } ;inline
: 1+ ( a -- a+1 ) inline{ 40 } ;inline | inc eax
: 1- ( a -- a-1 ) inline{ 48 } ;inline | dec eax
: - pop>ebx inline{ 29 d8 } ;inline 
: + pop>ebx inline{ 01 d8 } ;inline 
: and pop>ebx inline{ 21 d8 } ;inline 
: or pop>ebx inline{ 09 d8 } ;inline 
: xor pop>ebx inline{ 31 d8 } ;inline
: not inline{ 83 f8 01 19 c0 } ;inline  | cmp eax,1 ; sbb eax,eax
: invert inline{ f7 d0 } ;inline | not eax
: negate inline{ f7 d8 } ;inline | neg eax
: << inline{ 89 c1 ad d3 e0 } ;inline 
: >> inline{ 89 c1 ad d3 e8 } ;inline 
: +! inline{ 89 c3 ad 01 03 ad } ;inline
: @ inline{ 8b 00 } ;inline 
: w@ inline{ 0f b7 00 } ;inline
: swap inline{ 89 c3 8b 06 90 89 1e } ;inline
: * inline{ f7 26 83 c6 04 } ;inline 
: ++ inline{ ff 00 ad } ;inline 
: -- inline{ ff 08 ad } ;inline 
: cells inline{ c1 e0 02 } ;inline 
: cell+ inline{ 8d 40 04 } ;inline 
: >body inline{ 8d 40 05 } ;inline 
: cell- inline{ 8d 40 fc } ;inline 
: body> inline{ 8d 40 fb } ;inline 
: 2cell- inline{ 8d 40 f8 } ;inline
: 2cell+ inline{ 8d 40 08 } ;inline 
: 3cell+ inline{ 8d 40 0c } ;inline 
: 4cell+ inline{ 8d 40 10 } ;inline 
: rot inline{ 87 06 87 46 04 } ;inline
: -rot inline{ 87 46 04 87 06 } ;inline
: c@ inline{ 0f b6 00 } ;inline | movzx eax, byte [eax]
: nip inline{ 8d 76 4 } ;inline | lea esi, [esi+4]
: pick inline{ 8b 04 86 } ;inline | mov eax, [esi+4*eax]
: put inline{ 89 c3 ad 89 04 9e ad } ;inline | mov ebx, eax; lodsd ; mov [esi+4*ebx], eax ; lodsd
: r> dup inline{ 58 } ;inline | [ $58 1, ;
: r@ r> inline{ 50 } ;inline | [ $50 1, ;
: >r inline{ 50 ad } ;inline | [ $ad50 2, ;
: rdrop inline{ 5b } ;inline | [ $5b 1, ;
: 00; inline{ 09 c0 75 01 c3 } ;inline | or eax, eax; jnz .done; ret; .done:
: abs inline{ 99 31 d0 29 d0 } ;inline | cdq; xor eax, eax; sub eax, edx
: (execute) inline{ ad ff d3 } ;inline | lodsd; call ebx
: @execute inline{ 8b 18 } (execute) ;inline | mov ebx, [eax]
: execute inline{ 89 c3 } (execute) ;inline  | mov ebx, eax
: rp@ dup inline{ 89 e0 } ;inline  | get current ESP
: rpick  inline{ 8b 04 84 } ;inline | mov eax, [4*eax+esp]
: 2* inline{ d1 e0 } ;inline
: 2/ inline{ d1 f8 } ;inline
forth
: over inline{ 8d 76 fc 89 06 8b 46 04 } ;
: here (here) @ ;
: 2over 3 pick 3 pick ;
: off inline{ 31 db 89 18 }  drop ;
: on  inline{ 31 db 4b 89 18 } drop ;
: space 32 emit ;
: (.) 0 (.r) ;
: type_ type space ;
: .r (.r) type_ ;
: . (.) type_ ;
: ? @ . ;

| ==== OFFSET WORDS ====
: >class cell- ; 
: >xt cell+ ; 
: >size >xt 2cell- @ ; 
: >name 2cell+ ;
: count dup c@ swap 1+ swap ;

| mov ecx, eax;drop;mov ebx,eax;drop;imul ebx;idiv ecx
: */  inline{ 89 c1 ad 89 c3 ad f7 eb f7 f9 } ;
: allot (here) +! ;
: max inline{ 89 c3 ad 39 d8 7f 02 89 d8 } ;
: min inline{ 89 c3 ad 39 d8 7c 02 89 d8 } ;
 : w! inline{ 89 c3 ad 66 89 03 ad } ;
: '' parsews (find) ;
: vector 0 : vector! $e9 1, , ;
: ' [ vector ] '' | drop through...
: xt 00; >xt @ ; | take dict and return 0 or xt
: find (find) xt ;
: lastxt last@ >xt @ ;
: pdoes lastxt 1+ r> over - cell- swap !  ;
: dodoes inline{ 8d 76 fc 89 06 5b 58 53 } ; | dup; pop ebx; pop eax; push ebx
: alias ( xt -- ) header last@ >xt ! ;
' literal alias literal,
: later r> r> swap >r >r ;
macro
: p: '' dup cell+  @ literal,  cell- @ compile ;
: ['] ' p: literal ;
: [''] '' p: literal ;
: does> ['] pdoes compile ['] dodoes compile $90 1, ; | NOP for #116

| class words:
: notail ['] 'notail default_class ! ;
: mnotail ['] 'macront default_class ! ;

forth  
variable turnkey?
 : dovar inline{ 8D 76 FC 89 06 58 C3 } ;
' dovar : create parsews : (create) (header) literal compile  ;
variable classes
	' 'forth classes link 
	' 'macro classes link 
	' 'defer classes link 
	' 'notail classes link 
	' 'inline classes link 
	' 'value classes link 
	' 'constant classes link 
	' 'variable classes link 
macro
: newclass lastxt classes link ;
forth
: :: 0L (header) lastxt p: ] ; 
: noop ; 
: >rel 1+ here - cell- ;
: rel> dup @ swap cell+ + ;
: defer 
    header 
    ['] 'defer last @ cell- !
    0 vector!
    ['] noop >rel vector!
    ;
: defer@  1+ rel> ;
: defer@def  6 + rel> ;
s0 variable, (s0)
: reset ( -- )   (s0) @ inline{ 89 c6 31 c0 } ; 
: spaces 0 max 0; 1- space spaces ;
: cr 10 emit ;
: 2swap inline{ 87 46 04 87 1e 87 5e 08 87 1e } ;
| mov ebx,eax; mov eax, [esi]; cdq; idiv ebx; mov [esi], edx
: /mod  inline{ 89 c3 8b 06 99 f7 fb 89 16 } ;
: / /mod nip ;
: mod /mod drop ;
: tuck swap over ;
: c!  inline{ 8b 1e 88 18 8b 46 04 8d 76 08 } ; | mov ebx, [esi]; mov [eax], bl; drop2
: bye 0 (bye) ;
: true -1 ;
: false 0 ;
: ?dup inline{ 85 c0 74 05 8d 76 fc 89 06 } ; | test eax, eax; jz .1; dup; .1:
: depth (s0) @ inline{ 29 f0 } 2/ 2/ 1- ;
notail
: >rr r> r> rot >r >r >r ;
: rr> r> r> r> -rot >r >r ;
forth
defer key?
defer ekey

| ========================= CONDITIONALS ==================
: ahead vector here ;
: (if $adad063b , ; | cmp eax, [esi]; lodsd; lodsd
: if) 0 , here ;
: back compile here  body> ++ ;
mnotail
: then align here over - swap cell- !  ;
macro
: 0if $0fadc085 , $85 1, if) ; | test eax, eax; lodsd; jnz ...
: =if (if $850f 2, if) ;
: <>if (if $840f 2, if) ; 
: >if (if $8d0f 2, if) ; 
: <if (if $8e0f 2, if) ;
0 : if literal p: literal p: <>if ;
: else 0 back here swap p: then ; 
: ;then p: ;; p: then ;
macro
: cb{ ahead dup ;
: }cb p: ;then literal, ;
forth
: ((cmp)) [ $b8ad063b , 0 , ;inline | cmp eax, [esi] ; lodsd ; mov eax, 0 ....
forth
: compiling? (compiling?) @ ;
: then> compiling? if r> compile then ;
: ?literal compiling? if literal, then ;
: < ((cmp)) inline{ 7e 01 48 } ; | jle .1; dec eax
: u< ((cmp)) inline{ 76 01 48 } ; | cmp eax, [esi]; lodsd; mov eax, 0; jbe .1; dec eax
: > ((cmp)) inline{ 7d 01 48 } ; | cmp eax, [esi]; lodsd; mov eax, 0; jge .1; dec eax
: = ((cmp)) inline{ 75 01 48 } ;
: <> ((cmp)) inline{ 74 01 48 } ;

| ========================= EXTRA ==================
: used dict @ d0 - here h0 - ;
create scratch 4096 allot
: 2variable create 0 , 0 , ;
: 2@ dup @ swap cell+ @ ;
: 2! 2dup cell+ ! nip ! ;
: srcstr >in @ src @ over - ;
: save turnkey? on parsews (save) cr bye ;
forth
: ||| srcstr + >in !  ;
: between inline{ 89 c3 ad 89 c1 ad 93 40 29 c8 29 cb 29 c3 19 c0 } ;
: (p.r) padchar @ >r padchar ! (.r) r> padchar ! ;
variable temp

| ========================= STRINGS ==================
: lcount dup cell+ swap @ ;
: 0term 2dup + 0 swap c! ;
: lplace 2dup ! cell+ swap 0term move ;
: +lplace  ( a n buf )
    dup >r lcount + ( a n a' r:buf )
    r> swap >r      ( a n buf r:a' )
    2dup +! cell+ drop r> swap 0term move
    ;
: c+lplace ( c lstr -- )
    >r r@ lcount + c!
    r> dup ++ lcount 0term 2drop
    ;
: asciiz, dup 1,
: z, here, 0 1, ;
: asciizl, dup , z, ; 
variable (s^)
: dostr 
    r> dup count | retaddr str count
    rot over + 1+ 1+ >r | str count
    ;
: dolstr
    r> dup lcount | retaddr str count
    rot over + cell+ 1+ >r | str count
    ;
| compile string (use short version if possible) :
: (") dup 256 <if ['] dostr compile asciiz, else ['] dolstr compile asciizl, then ;
| put string into 'rotating' temp area
: "" 255 min (s^) @ 1+ 8 mod dup (s^) ! 
    256 * str0 + dup >r place r> count ;
macro
: " '" parse/ compiling? if (") else "" then ;
: ." p: " then> type ;
: z" p: " then> drop ; | "
forth
: c+place ( c cstr -- ) dup ++ count +  0 over c! 1- c! ;
: -2dup ( x y z -- x y x y z ) >r 2dup r> ;
: -2nip ( x y z -- z ) -rot 2drop ;
: 2nip ( a b c d -- c d ) 2swap 2drop ;
: chop ( a n c -- a1 n1 ) -2dup /char nip - ;
: -chop ( a n c -- a1 n1 ) -2dup \char nip - ;
|		mov ebx, eax
|		lodsd
|		add [esi], ebx
|		sub eax, ebx
: /string ( a n m -- a1 n1 ) [ $01adc389 , $d8291e 3, ;

| ========================= LOOPING ==================
: unloop inline{ 5b 5b } ;inline | pop ebx|pop ebx
: remains dup inline{ 8b 04 24 } 1- ;inline | mov eax, [esp]
: more ( n -- ) 1+ inline{ 89 04 24 ad } ;inline | mov [esp], eax|lodsd
: skip ( n -- ) inline{ 29 04 24 ad } ;inline | sub dword [esp], eax|lodsd
| leave loop at end of loop (e.g. don't do another iteration)
: eleave inline{ 5b 68 01 00 0 0 } ;inline | pop ebx|push 1
forth
: i dup inline{ 8b 44 24 08 2b 44 24 04 } ; 
: j dup inline{ 8b 44 24 10 2b 44 24 0c } ;
align here $850f , $75 , $8f0f , $7f ,
: (while)
    cells literal + >r
    align
    here - 1- 1- dup -125 <if
        | long jump!
        r> @ 2,
        cell- ,
    else
        | short jump!
        r> cell+ @ 1, 1, 
    then
    ;
: (do) align here 0 >rr ;
macro
: leave $e9 1, here >rr 0 , ;
: repeat align here ;
: again back ;
: while $adc085 3,  | test eax, eax; lodsd
    0 (while) ;
| mov ebx, eax; lodsd; push eax; sub eax, ebx; push eax; lodsd ...
: do $50adc389 , $ad50d829 , (do) ; 
: 0do $ad5050 3, (do) ;
: ?do 
    0 >rr
    $50adc389 , $ad50d829 , | mov ebx, eax;lodsd;push eax;sub
    $840f 2, | jz dword later
    here >rr 0 ,
    align here
    ; 
: loop  $240cff 3, | eax,ebx;push eax; lodsd
    2 (while)
    $08c483 3, 
    | resolve 'leave' forward references:
    repeat
        rr> 0;
        here over - cell- 3 - swap !
    again
    ;
forth
| ========================= DICT ==================
variable findprev?
variable foundprev
: findprev ( dict-to-find -- prev-dict ) 
	findprev? ! foundprev off 
	cb{
        cell- dup  | dict dict
        @ findprev? @  | dict next ours
        =if foundprev xchg then
    }cb
    last iterate 
	foundprev @ ;

: dict? '' ?dup 0if '" emit type '" emit ." is not a word" cr -1 throw then ;
: xt? dict? >xt @ ;
: !isa ( class-dict a n -- ) '" emit type '" emit ."  not class: " >name count type cr -1 throw ;
: isa ( class-dict <name> -- xt-of-name | THROW )
    '' | class-dict dict-of-name
    ?dup 0if !isa then
    | class-dict dict-of-name
    2dup | class name class name
    >class @ swap >xt @ | class name name-class class
    <>if >name count !isa then
    nip >xt @ 
    ;

notail
forth

: hide ( <name> -- )
    dict?
    dup  findprev
	| us
: (hide)  ( dict dict' -- )
	dup if | there is a previous item
		swap @ swap
	else
		drop @ last
	then
	!
    ;

hide !isa
hide (do)
hide foundprev
hide findprev?
hide (execute)
hide (compiling?)
: then,> compiling? if literal, r> compile then ;
: (is) ( xt1 xt2 -- )
    1+ 2dup - cell- -rot nip
    2dup swap body> swap >body ! ! ;

macro
: is [''] 'defer isa then,> (is) ; | compiling? if literal, p: (is) ;then (is) ;
forth

| ========================= PRIVATE STACK (used by contexts)
: stack: ( n -- )  
        create  here ,  cells allot ; 

: stack-size   ( stack -- nof-cells ) dup @ swap - 4 / ;
: stack-empty? ( stack -- flag )  dup @  =  ;

: push  ( x stack -- ) 4 over +! @ ! ; 
: pop    ( stack -- n ) 
		dup dup @ - 0; drop 
		dup @ @ -4 rot +! ;
: peek ( stack -- x ) @ @ ;
: peek-n ( n stack -- m )  @ swap cells - @ ;


: stack-iterate ( xt stack -- )
  dup stack-empty? if 2drop ;then

  dup stack-size 0do
    over over i swap peek-n swap execute
  loop
  2drop
;


| ========================= CONTEXTS ==================
' (find) defer@	 variable, oldfind 

| Create a list containing all contexts:
variable all-contexts

| Create the stack that contains the active contexts
| (TOS is the currently active context)
63 stack: contexts
63 stack: saved-contexts

: ctx>name body> cell- @ >name count ;
: exit~
	| pop current context
    contexts pop 0; | context-to-deactivate

    contexts stack-empty? if contexts push ;then

    | save current last into that context
    last@ swap !

    | now restore the last of the newly active context
    contexts peek @ last!
	;
: push~ contexts stack-size saved-contexts push ;
: pop~ contexts stack-size saved-contexts pop -
    dup 1 <if drop ;then
    0do exit~ loop ;

: setclass ( class -- )
    default_class xchg
    later
    default_class !
    ;
: .contexts cb{ @ dup ctx>name type space }cb all-contexts iterate ;
: .~ cb{ ctx>name type space }cb contexts stack-iterate ;
: ''context
    >body
    contexts stack-empty? not
    if
      | save the current "last" into the current context
      last@  contexts peek !
    then

    | make the specified context the current one
    dup contexts push

    | set "last" appropriately
    @ last!
    ;
: 'context compiling? if literal, p: ''context else ''context then ; newclass
: context: parsews
: (context) ( a n -- )
    (find) 0if
        ['] 'context setclass
        >r (create) r> 
            0 ,				| 00 this context's chain of words
            oldfind @ ,		| 04 '(find)' for this context
            lastxt >body all-contexts link
    then
	;

: find-word ( a n context -- 0 | xt -1 ) dup 0if 3drop 0 ;then
  last@ >r
  dup @ last!
  | get the 'find' for this context, and execute it on the string
  dup cell+ @ >r -2dup -rot r> execute
  | restore last
  r> last!

  | a n ctx a n 0 | a n ctx xt
  dup 0if 3drop 3drop 0 else >r 3drop r> -1 then
;

: context? [''] 'context isa >body  ;
macro

: in~ ( <ctx> <word> -- )
    context?
    parsews rot find-word
    0if ." in~ failed " ;then
	| dict entry: do the appropriate thing
	dup >xt @ swap cell- @execute
	;

: with~ ( <ctx> -- ) context? contexts pop swap contexts push contexts push ;
: without~ contexts pop contexts pop drop contexts push ;

| transfer the word <word> into the context <ctx>
: to~ ( <ctx> <word> -- ) context?
    dict?	| ctx dict
: (to~) ( ctx dict -- )
    over contexts peek =if 2drop ;then
	dup findprev			| ctx dict dict'
	over >r
	| hide the original entry
	(hide) r>				| ctx dict
	| put this entry into the new context
	| get the 'prev' of the ctx and make it the next
	over @ over !
	| make the last the first:
	swap !
	;
: setfind~ ( xt <ctx> -- ) context? cell+ !  ;
forth
| print all contexts in which the word (a,n) can be found:
: 3dup | 2dup 4 pick -rot ;
	dup 2over rot ;
: 4dup 2over 2over ;
: xfind ( <name> -- )
	parsews
: (xfind)
	cb{
		@ 3dup
		find-word nip if ctx>name type space then
		true
	}cb all-contexts iterate 2drop ;

context: ~
context: ~reva
context: ~sys
context: ~os
context: ~doubles
context: ~strings
context: ~util
context: ~io
context: ~priv


to~ ~doubles >double
last@ ' ~ >body !
~

| reset to only the first context:
: (reset~) contexts stack-size 1- 0; drop exit~ (reset~) ;
' ~ variable, root
: reset~ (reset~) 
    contexts peek
    root @ >body  <>if
        | some random context is on the stack.  make sure "~" is there instead
        root @ 'context
        p: without~
    then
    ; 

to~ ~priv root
to~ ~priv (reset~)

: only~ parsews eval
    contexts pop >r
    reset~ 
    contexts pop drop
    r> contexts push ;

:: ( a n -- xt | a n 0 )
  | update "last" in the current context
  last@ contexts peek !
  contexts stack-size 0do
    2dup i contexts peek-n find-word
    if -2nip unloop ;then
  loop
  0 ; is (find)
| set the search order while building Reva:
reset~ ~reva ~priv ~sys ~os ~util ~io ~strings ~
| ========================= ENDOFCONTEXTS ==================
| ========================= ENDOFCONTEXTS ==================
| ========================= ENDOFCONTEXTS ==================
~priv 
variable cases
| tail-tail optimization fails here:
: >here cases @ p: then ;
: inrange? ( x low hi -- x flag ) 2 pick >r between r> swap ;
exit~ 
macro
: case ( -- ) temp cases ! ;
: caseof ( n -- n |  )  p: over p: =if p: drop ;
: $caseof ( a n -- a n | ) p: 2over p: cmp p: 0if p: 2drop ;
: rangeof ( low high -- n | ) p: inrange? p: if ;
: endof ( -- ) 
	>here 
	ahead cases !
	p: then 
	;
: endcase ( -- ) >here ;
forth

| ========================= VARIOUS ==================
: hex 16 : base! base ! ; : decimal 10 base! ; : binary 2 base! ; : octal 8 base! ;
create nul  0 1, | "empty" NUL terminated string
: .2x 16 /mod >digit emit >digit emit ; 
: rol8 inline{ c1 c0 08 } ;inline | [ $08c0c1 3, ;
: .x 4 0do rol8 dup $ff and .2x loop drop space ;
: .s depth dup '( emit (.) type ') emit space 0 max 0; 10 min dup 0do dup i - pick . loop drop ;
: rdepth rp0 @ rp@ - 2 >> ;
: .rs rdepth 1- dup '( emit (.) type ') emit space 0 max dup 0; 10 min 
    0do dup i - rpick .x loop drop ;
~strings
: split  ( a n c -- a1 n1 a2 n2 true | a n false )
    -2dup /char 
: (split) ( a n a2 n2 -- a1 n1 a2 n2 )
    0; 1 /string
	2swap
	2 pick - 1- true
	;
: rsplit ( a n c -- a1 n1 a2 n2 true | a n false )
	-2dup \char (split) ;
exit~

forth

~priv
| implementation of 'words' :
variable wcnt
defer ((words))
2variable (w)
: (showword) dup 0if 2drop ;then type_ wcnt ++ ;
: words? 2dup (w) 2@ search -2nip 0; drop (showword) ;
exit~

: words parsews dup >r (w) 2! 
    r> if ['] words? else ['] (showword) then is ((words)) 
: (words) wcnt off 
    cb{ cell- >name count ((words)) 1 }cb
    last iterate cr wcnt ? ." words" cr ;
: words~ 
    context?
: (words~)
    ['] (showword) is ((words))
    last@ >r
    @ last!
    (words)
    r> last!
    ;
to~ ~priv (words)
: xwords
	cb{ 
		@ dup
		." context: " dup ctx>name type cr
        (words~) cr 
	}cb all-contexts iterate
	;

| implementation of 'dump' :
~priv
create dump$ 17 allot   | space for 16 characters
: dumpasc
    dump$ count dup 0if 2drop else
        16 over - 3 * spaces type
    then cr dump$ off ;
: ?nl dup 0; 16 mod not 0; 
    drop over dumpasc .x ;
: >printable dup 32 127 between not if drop '. then ;
exit~
~util
: dump 0; dump$ off 
    over .x 0do | iterate for each line:
        i ?nl drop dup c@ dup >printable dump$ c+place .2x space 1+
    loop drop dumpasc ;

: xt>size 
    dup 1000 $c3 /char 0if drop 4 ;then
    swap -
    ;
exit~

macro
~strings
: lc ( c -- c' ) $20 or ;
: quote ( <cr> --- a n ) 
    parsews drop c@ parse 
    compiling? if (") ;then
    255 min "" ;
exit~
~util
: 'alias dup >xt @ swap >class @execute ; newclass
: alias:
    ['] 'alias setclass
	header
    dict? 
	last@ >xt ! ;
: prior last@ dup @ last! dict? | orig-last dict 
  dup cell+ @ literal, cell- @ compile | implementation of p:
  last!  ;
exit~

forth
: constant 
    ['] 'constant setclass
	header swap ,  ;
-1 constant THROW_GENERIC
-2 constant THROW_BADFUNC
-3 constant THROW_BADLIB
0 constant 0
1 constant 1
-1 constant -1

: value ['] 'value setclass
	header swap , ;
~priv
: (to) | dict xt
    compiling? if 
        literal, p: !
    else !  then ;
: (+to) | dict xt
    compiling? if 
        literal, p: +!
    else +!  then ;
exit~
macro
: to [''] 'value isa then,> (to) ;
: +to [''] 'value isa then,> (+to) ;
forth

| these are all called with a stack: a n x
| where 'a' is the buffer to put the char in
|       'n' is the buffer's max size
|       'x' is the number of characters in it
|   and 'c' is the current character (for the default)
~io
: accept ( a n -- n2 )
    0 repeat 
    ekey ( dup accept? ) 
        case
            8 caseof 
                dup | a n x x
                if
                    8 emit space 8 emit
                    1-
                then
                true   | a n (0|x-1) true
              endof
            10 13 rangeof drop false endof
            27 caseof drop 0L endof
                dup emit | show the key
                | a n x c
                >r rot dup >r -rot dup  | a n x x  r: c a
                r> + r> swap            | a n x c (a+x)
                c!                      | a n x
                1+
                2dup -  | =0 (false) if we shall not continue reading characters...
        endcase
    while nip nip  ;
exit~
hide xt
hide (is)
defer help
defer help/
context: ~help ~help
defer nohelp
defer showhelp
: help! " needs helper" eval ;
:: help! help/ ; is help/
:: help! help ; is help
exit~

| DOERS
~priv
: (is2) ( xt1 xt2 -- )
    1+ 2dup - cell- -rot nip
    ! ;
: !r tuck cell+ - swap ! ;
: (make) r> tuck cell+ swap !r dup @ + cell+ >r ;
exit~
~sys
: defer? [''] 'defer isa ;
exit~
macro
: make
  defer? 1+ compiling? if literal, p: (make) 0 , here ;then
  :: swap 2dup !r >body !r ;
: undo defer? 1+ ?literal then> off ;
: my defer? 1+ literal, then> dup @ >rr >rr
    later rr> r> ! ;
: of p: over p: =if $ad 1, ;
: >defer xt?  then,> (is2) ;
forth
hide ((cmp))

:: | version of tick which understands 'alias
    '' dup 0;
    | xt xt
    >class @ ['] 'alias =if >xt @ then
    >xt @
; >defer '

~util
defer disassemble ' dump is disassemble 

defer see make see ' ?dup 0if type '? emit else
    dup xt>size 0drop; disassemble
    then cr ;
exit~ 

| ========================= PREPROCESSOR ==================
~sys
variable (else)
exit~
macro
: [ELSE] (else) @ >in ! ; : [THEN] ;
: [IF]
    srcstr " [THEN]" search 0if ." no matching [THEN]" cr ;then
    drop srcstr drop over over -
    " [ELSE]" search if
        drop 2dup >if swap 6 + (else) !  then 
    then
    swap 0if 6 + >in !  else drop then
;
: [DEFINED] '' if true else 2drop false then ;
forth
: sm/rem ( d n -- rem div ) inline{ 89 c3 ad 89 c2 ad f7 fb 92 8d 76 fc 89 06 89 d0 } ;

| ========================= FFI LAYER ==================
~priv
variable (cur-lib)
variable last-lib
variable last-func

: notloaded ( a n a2 n2 throwcode -- ) >r type_ type ."  not loaded" cr r> throw ;
exit~
: lib create 
        0 ,                 | +00 this is the handle of the library
        asciiz,             | +04 store cstr name of library
        lastxt
		dup (cur-lib) !      | make us the current-library to use
		last-lib link	    | link us into the chain of libs
    does>
        | make us the current-library:
        dup body> (cur-lib) !
        dup @ 0if dup cell+ count (lib) over !  then
        dup @ | provide our 'handle'
        dup 0if drop cell+ count " library" THROW_BADLIB notloaded then
        nip
    ;

~priv
: (func-create)
		parsews 2dup (create) rot
        0 ,     | function pointer
        ,       | number of parameters
        (cur-lib) @ ,       | library (xt of library)
        asciiz, | zt string name of function
		lastxt last-func link
        ;

: (func-data-does)
        dup @ 0if
            dup dup | self self self
            3cell+ count  | self self a n
            rot 2cell+
            @execute  | self a n lib
            (func) | self handle
            over ! | self
        then
        dup @ 0if 3cell+ count " function" THROW_BADFUNC notloaded then
        ;
exit~ 
: func: ( n <name> -- )
    (func-create)  
    does> (func-data-does) 
	dup @ swap cell+ @ 
	(call) 
    ;

: data: ( <name> -- )
    0 (func-create)
    does> (func-data-does) @ @ ;

: >base> base xchg later base! ;
: hex# ( n -- a n ) 16 >base> >r (.) r> ;
: xt>name  dup  cell- @  dup 0if  drop  hex#  ;then  nip  >name count  ;

: .libs
    ." handle   word  libname" cr
	cb{	
		@  
		dup >body @ .x space
		dup xt>name type_
		>body cell+ count type cr
		true
	}cb last-lib iterate
    ;


: .funcs 
    ." handle   word  funcname libname" cr
	cb{	
		@  
		dup >body @ .x space
		dup xt>name type_
		>body dup 3cell+ count type_
		2cell+ @ >body cell+ count type cr
		true
	}cb last-func iterate
    ;

| Makes an alias of the last word to the new name, and 'hides' the prior name:
: as ( <name> -- )
    last@ dup >xt @ dup
    parsews (create) last@ >xt ! 
	last@ 
	| oldxt newdict
	swap cell- !
    @ last@ !
    ; 

~priv
: (cleaner) @ >body off true ;
exit~
: cleanup-libs 
	['] (cleaner) last-func iterate
	['] (cleaner) last-lib iterate
	;
' cleanup-libs onexit

| first string is Linux version, second is Windows version:
: ?lib ( a n a n <name> -- ) os not if 2swap then 2drop lib ;

| ========================= OS LAYER ==================
| os-specific words:
: sp   inline{ 83 ee 04 89 06 89 f0 } ;
~os
os [IF]
    " libc.so.6" lib libc
    : osname " Linux" ; 
    : getpid 0 20 syscall ;
    ~priv
    : waitinput >r 1 sp >rr r> 1000 /mod swap 1000 * swap
                sp 0 0 r> 2 5 142 syscall >r 3drop r> noop ;
    :: 1 waitinput 0 max ; is key?
    create in_termios 17 cells allot
    : non-canonical 
        | save terminal state
        in_termios $5401 0 3 54 syscall drop
        in_termios 12 + @ >r
        | set terminal state:
        &100 in_termios 12 + !  
        in_termios $5403 0 3 54 syscall drop
        r> in_termios 12 + !  
        ;
    : restore-canonical in_termios $5403 0 3 54 syscall drop ;

    :: 
        non-canonical
        key dup 27 =if
|           key? if
|               repeat
|                   key
|               while
|           then
        then 
        restore-canonical
        ; is ekey

    1 func: localtime
    :: 0 1 13 syscall here ! here localtime 
        dup @ swap cell+ dup @ swap cell+ dup @ 
        swap cell+ dup @ 
        swap cell+ dup @ 1+ 
        swap cell+ @ 1900 + ;
    exit~ 
    ~
    alias time&date
    : ms 1000 /mod here !  1000000 * here cell+ !
        0 here 2 162 syscall drop ;
    : ms@ 0 here 2 78 syscall drop here @ 1000000 * here cell+ @ + 1000 / ;
    : makeexename ;
    exit~
[ELSE]
    : osname " Windows" ; 
    " user32" lib u32
    " gdi32" lib g32 
    " kernel32" lib k32
    ~priv
    1 func: GetLocalTime
    1 func: Sleep
    0 func: GetTickCount
    0 func: GetCurrentProcessId 
    2 func: GetConsoleMode
    2 func: SetConsoleMode
    4 func: PeekConsoleInputA
    4 func: ReadConsoleInputA 

    create ir 5 cells allot | 0=type 4=keydown 8=repeatcount 10=vkeycode
                            | 12=vscancode 14=ascii 16=controlkeystate
    :: stdin here 1 temp PeekConsoleInputA drop temp @ ; is key?
    : shiftmod ( n -- mask )
        | 3 -> alt  0c -> ctrl  10 -> shift
        | 000sccaa --> 00000sca --> 0sca00
        dup >r 3 and if $100 else 0 then
        r@ $c and if $200 else 0 then
        r> $10 and if $400 else 0 then 
        or or 
        ;
    : (ekey) stdin temp GetConsoleMode drop temp @
        stdin 0 SetConsoleMode drop
        repeat 
            stdin ir 1 temp ReadConsoleInputA drop
            ir cell+ @ not 
        while
        ir 14 + w@ ?dup 0if
            ir 10 + w@ 
            ir 16 + @ | controlkey
            shiftmod or
        then
        swap stdin swap SetConsoleMode drop
        ;
    :: 0 repeat drop (ekey) dup $ff and 16 18 between while ; is ekey

    ~os
    : getpid GetCurrentProcessId ;
    exit~
    : exe " .exe" ;
    ~
    : ms@ GetTickCount ;
    : ms  Sleep drop ;
    : time&date here dup GetLocalTime drop 
        dup 12 + w@ swap
        dup 10 + w@ swap
        dup 8 + w@ swap
        dup 6 + w@ swap
        dup 2 + w@ swap
        w@ ;
    : makeexename ( a n -- a' n' )
        2dup here lplace exe here +lplace
        '. split -2nip if
            exe 1 /string cmpi 0if
                -4 here +!
            then
        then
        here lcount
        ;
    exit~
    exit~ 
[THEN]

| ========================= ENVIRONMENT ==================
~priv
    32767 constant #env-var-buffer 
    create env-var-buffer #env-var-buffer allot
exit~
os [IF]
    ~os
    1 func: getenv 
    1 func: putenv
    exit~
    ~
    : getenv zt in~ ~os getenv zcount ;
    : setenv ( a1 n1 a2 n2  -- )  |  variable, value
        2swap env-var-buffer lplace 
        '= env-var-buffer c+lplace 
        env-var-buffer +lplace | buffer: variable=value
        env-var-buffer lcount zt putenv drop
        ;
    exit~
[ELSE]
    ~os
    3 func: GetEnvironmentVariableA
    2 func: SetEnvironmentVariableA
    exit~
    ~
    : getenv ( a n -- a n ) zt env-var-buffer #env-var-buffer
        GetEnvironmentVariableA env-var-buffer swap ;
    : setenv ( a1 n1 a2 n2 -- ) 
        2swap zt -rot zt        | z1 z2
        SetEnvironmentVariableA drop
        ;
    exit~
[THEN]
exit~

| ========================= FILEIO ==================
| file i/o words:
~os
os [IF]
    ~
    : pathsep '/ ;
    exit~
    : (seek) ( whence offset handle ) 3 19 syscall ;
    : rename zt -rot zt 3 38 syscall ioerr ! ;
    : delete  ( a n -- ior ) zt 1 10 syscall ioerr ! ;

| create stat_buf 100 allot
| struct stat {
|         unsigned long  st_dev;
|         unsigned long  st_ino;
|         unsigned short st_mode;
|         unsigned short st_nlink;
|         unsigned short st_uid;
|         unsigned short st_gid;
|         unsigned long  st_rdev;
|         unsigned long  st_size;
|         unsigned long  st_blksize;
|         unsigned long  st_blocks;
|         unsigned long  st_atime;
|         unsigned long  st_atime_nsec;
|         unsigned long  st_mtime;
|         unsigned long  st_mtime_nsec;
|         unsigned long  st_ctime;
|         unsigned long  st_ctime_nsec;
|         unsigned long  __unused4;
|         unsigned long  __unused5;
| };
    
    ~priv
    : (stat) ( a n -- x ) zt here swap 2 106 syscall ioerr ! ;
    exit~
    : stat ( a n -- x ) (stat) here 2cell+ @ ;
    : mtime ( a n -- x ) (stat) here [ 12 cells ] + @ ;
[ELSE]
    ~
    : pathsep '\ ;
    exit~
    k32 drop
    ~priv
    4 func: SetFilePointer
    2 func: MoveFileA as MoveFile
    1 func: DeleteFileA as DeleteFile
    1 func: GetFileAttributesA as GetFileAttributes
    4 func: GetFileTime
    exit~
    | stat:
    ~io
    : stat zt GetFileAttributes ;
    | delete:
    : delete zt DeleteFile not ioerr ! ;
    | rename:
    : rename zt -rot zt swap MoveFile not ioerr ! ;
    : mtime open/r ioerr @ if drop -1 ;then
        >r | fh
        r@ 0 0 here GetFileTime if
            here 2@ | FILETIME>unixtime
            27111902 - swap -717324288 - swap
            10000000 sm/rem nip
        else
            -1
        then
        r> close ;

    : (seek) ( whence offset handle ) 
        -rot 0 rot
        SetFilePointer ( handle off offhigh whence )
        ;
    exit~
[THEN]
exit~
to~ ~os hinst
to~ ~os syscall
~util
os [IF]
    ' | alias #!
[ELSE]
    ' noop alias @rem
[THEN]
exit~

: appdir appname zcount pathsep -chop 1+ ;
: libdir appdir 1- pathsep -chop 1+ scratch place " lib" scratch +place pathsep
    scratch c+place scratch count ; 
: seek ( offs h -- newoffs ) >r 0 swap r> (seek) drop ;
: tell ( fh -- offs ) 1 0 rot (seek) ;

| ========================= NEEDS ==================
~priv
variable uses-list
: libname ( a n la ln -- a1 n1 )
    dup if scratch place scratch +place scratch count
    else 2drop then ;

2variable needy
variable needs?
: needslibname libname (include) ioerr @ ;
: needs 
    parsews 
: (needs)
    2dup needy 2!
	needs? on
	cb{
		@ count needy 2@ cmp dup needs? !
	}cb
	uses-list iterate 
	needs? @ 0if 2drop ;then
    |  a n 
    | try in userlib first:
    2dup " REVAUSERLIB" getenv needslibname if
        2dup libdir needslibname  if 
            type '? emit cr ;; 
        then
    then
	here -rot asciiz, uses-list link
   ; 

: .needs cb{ @ count type_ true }cb uses-list iterate cr ;
to~ ~ needs
to~ ~ .needs
exit~
: .classes cb{ @ xt>name type space true }cb classes iterate ;
hide classes

| ========================= CONTEXT FIXUPS ===============
to~ ~strings place to~ ~strings +place to~ ~strings c+place
to~ ~strings lplace to~ ~strings +lplace to~ ~strings c+lplace to~ ~strings count
to~ ~strings lcount to~ ~strings (") to~ ~strings "" to~ ~strings /char to~ ~strings \char 
to~ ~strings chop to~ ~strings -chop to~ ~strings cmp to~ ~strings cmpi 
to~ ~strings search to~ ~strings zcount to~ ~strings zt to~ ~strings z"
to~ ~io creat to~ ~io close to~ ~io open/r to~ ~io open/rw to~ ~io read to~ ~io write
to~ ~io fsize to~ ~io ioerr to~ ~io seek to~ ~io tell
to~ ~util >lz to~ ~util lz> to~ ~util lzmax to~ ~util fnvhash  
to~ ~util getenv 
to~ ~util setenv 
to~ ~util THROW_GENERIC to~ ~util THROW_BADFUNC to~ ~util THROW_BADLIB
to~ ~util findprev to~ ~util save
to~ ~util asciiz, to~ ~util asciizl, to~ ~util z, to~ ~util used to~ ~util depth
to~ ~util spaces to~ ~util later
to~ ~sys (to~) to~ ~sys then,>  to~ ~sys (while) to~ ~sys dostr
to~ ~sys dolstr to~ ~sys (s^) to~ ~sys srcstr
to~ ~strings /string to~ ~strings 0term
to~ ~sys ?literal to~ ~sys then> to~ ~sys compiling? to~ ~sys (if to~ ~sys if)
to~ ~io ekey to~ ~io key? to~ ~io cr
to~ ~sys (s0) to~ ~sys dovar to~ ~sys dodoes to~ ~sys pdoes
to~ ~sys rel> to~ ~sys >rel to~ ~sys vector! to~ ~sys vector
to~ ~util >body to~ ~util >name to~ ~util >size to~ ~util >xt to~ ~util >class
to~ ~io type_ to~ ~io space to~ ~io type
to~ ~util rpick to~ ~util rp@ to~ ~util put to~ ~util 4cell+ to~ ~util 3cell+
to~ ~util 2cell+ to~ ~util 2cell- to~ ~util 3drop to~ ~util 0drop;
to~ ~sys pop>ebx  to~ ~sys (here) to~ ~sys dict to~ ~sys word?
to~ ~util slurp to~ ~util iterate to~ ~util link to~ ~util (save)
to~ ~util appname to~ ~util (include) to~ ~util include
to~ ~util >digit to~ ~util digit> to~ ~util >single
to~ ~sys (find) to~ ~sys src to~ ~sys tp to~ ~sys tib to~ ~sys >in to~ ~sys (bye)
to~ ~sys (func) to~ ~sys (call) to~ ~sys (-lib) to~ ~sys (lib)
to~ ~io emit to~ ~io key
to~ ~util here, to~ ~util parse/ to~ ~util os
to~ ~util argc to~ ~util (argv)
to~ ~sys cleanup to~ ~sys onstartup to~ ~sys onexit
to~ ~sys rp0 to~ ~sys str0 
to~ ~sys h0 to~ ~sys d0 to~ ~sys s0
to~ ~sys default_class  to~ ~sys cold
to~ ~sys find-word
to~ ~util stack-iterate to~ ~util peek-n to~ ~util peek to~ ~util pop
to~ ~util push to~ ~util stack-empty?  to~ ~util stack-size to~ ~util stack:
to~ ~sys xt? to~ ~sys isa to~ ~sys context? 
to~ ~priv all-contexts

to~ ~priv contexts hide oldfind

: reva reset~ ~reva ~os ~util ~io ~strings ~ ; reva
| ========================= REVA STARTUP ==================
: argv argc 1- min 0 max (argv) swap ?dup 0if zcount ;then 0do zcount + 1+ loop zcount ;
~reva
1 variable, argc# variable argcend 
: finish argc argc# ! ;
: revaver " 6.1.1" ;
: .ver " Reva " type  revaver type_ osname type ;
~priv
: argv> 2drop argc# @ 1+ argv argc# ++ ;
: (hi) over count '- =if c@ 
    case
        'n caseof argv> (needs) endof
        'e caseof argv> eval endof
        argc# @ argcend ! finish 
    endcase
   | args?
    else drop (include) then ;
: hello argc 1- 0if .ver cr ;then 
| argdo:
    repeat 
    argc# dup @ argv (hi)
    dup ++ @
    argc swap - 0 max while ;
defer caught
make caught ." Caught: " . cr ;
make appstart  hello repeat p: [ ['] interp catch ?dup if caught then again ;
make prompt  cr ." ok> " ;
to~ ~reva caught
exit~ 
exit~
to~ ~sys appstart to~ ~sys interp to~ ~sys prompt

| Generate the Reva executable:
appdir pad place 
" reva" makeexename pad +place pad count (save) bye

| vim: et ts=4 :
